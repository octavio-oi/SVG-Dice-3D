<svg class="viewer" viewBox="0 0 1000 1000" xmlns="http://www.w3.org/2000/svg" xmlns:x="http://www.w3.org/1999/xhtml">
  <style>
    /* <![CDATA[ */
    :root {
      --size: 25em;
      --ajust-size: calc((var(--size) / 2) - 1px);
    }
    
    .container {
      cursor: pointer;
      display: grid;
      place-items: center;
      background: #222;
      width: 100%; aspect-ratio: 1;
    }

    .dice {
      position: relative; pointer-events: none;
      width: var(--size); height: var(--size);
      font-family: arial; color: #FFF;
      fill: #08F; fill-opacity: 0.5;
      stroke: #FFF; stroke-opacity: 0.8;
      animation: move 2s cubic-bezier(0.5, 0, 0.5, 1);
      transform-style: preserve-3d;
      transform: rotateX(-35deg) rotateY(-45deg);
    }

    .face {
      position: absolute; user-select: none;
      width: var(--size); height: var(--size);
      transform-origin: center;
    }

    .face:nth-child(1) {transform: rotateX(90deg) translateZ(var(--ajust-size));}
    .face:nth-child(2) {transform: rotateY(180deg) translateZ(var(--ajust-size));}
    .face:nth-child(3) {transform: rotateY(90deg) translateZ(var(--ajust-size));}
    .face:nth-child(4) {transform: rotateY(-90deg) translateZ(var(--ajust-size));}
    .face:nth-child(5) {transform: translateZ(var(--ajust-size));}
    .face:nth-child(6) {transform: rotateX(-90deg) translateZ(var(--ajust-size));}

    @keyFrames move {
      0% {transform: rotateX(-35deg) rotateY(-45deg);}
      25% {transform: rotateX(-35deg) rotateY(-25deg);}
      75% {transform: rotateX(-35deg) rotateY(-65deg);}
      100% {transform: rotateX(-35deg) rotateY(-45deg);}
    }
    /* ]]> */
  </style>
  
  <defs>
    <rect id="rect" width="10" height="10" stroke-width="0.4"/>
    <text id="numbers" x="0" y="7.5" text-anchor="middle" font-size="8" fill="currentColor" fill-opacity="1" stroke="none"><tspan x="5 15 25 35 45 55">123456</tspan></text>
    <path id="balls" d="M5,5 z M12.5,2.5 z M17.5,7.5 z M22.5,2.5 z M25,5 z M27.5,7.5 z M32.5,2.5 z M37.5,2.5 z M32.5,7.5 z M37.5,7.5 z M42.5,2.5 z M47.5,2.5 z M45,5 z M42.5,7.5 z M47.5,7.5 z M52.5,2.5 z M52.5,5 z M52.5,7.5 z M57.5,2.5 z M57.5,5 z M57.5,7.5 z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-opacity="1"/>

    <symbol id="face1" viewBox="0 0 10 10"><use href="#rect"/><use data-js="use" href="#numbers" x="0" width="60"/></symbol>
    <symbol id="face2" viewBox="0 0 10 10"><use href="#rect"/><use data-js="use" href="#numbers" x="-10" width="60"/></symbol>
    <symbol id="face3" viewBox="0 0 10 10"><use href="#rect"/><use data-js="use" href="#numbers" x="-20" width="60"/></symbol>
    <symbol id="face4" viewBox="0 0 10 10"><use href="#rect"/><use data-js="use" href="#numbers" x="-30" width="60"/></symbol>
    <symbol id="face5" viewBox="0 0 10 10"><use href="#rect"/><use data-js="use" href="#numbers" x="-40" width="60"/></symbol>
    <symbol id="face6" viewBox="0 0 10 10"><use href="#rect"/><use data-js="use" href="#numbers" x="-50" width="60"/></symbol>
  </defs>
  
  <foreignObject x="0" y="0" width="100%" height="100%">
    <x:div class="container" data-js="container">
      <x:div class="dice" data-js="dice">
        <svg class="face"><use href="#face1"/></svg>
        <svg class="face"><use href="#face2"/></svg>
        <svg class="face"><use href="#face3"/></svg>
        <svg class="face"><use href="#face4"/></svg>
        <svg class="face"><use href="#face5"/></svg>
        <svg class="face"><use href="#face6"/></svg>
      </x:div>
    </x:div>
  </foreignObject>
  
  <script>
    // <![CDATA[
    const container = document.querySelector('[data-js="container"]')
    const useAll = [...document.querySelectorAll('[data-js="use"]')]
    const dice = document.querySelector('[data-js="dice"]')
    
    const hrefValues = ["#balls", "#numbers"]    
    const angle = {x: 240, y: 240}

    container.addEventListener("mouseenter", () => {
      dice.style.transition = "200ms ease-out"
    })
    container.addEventListener("mousemove", e => {
      const haftWidth = e.target.clientWidth >> 1
      const haftheight = e.target.clientHeight >> 1
      const mouseX = ((e.offsetY - haftWidth) / haftWidth) * angle.y
      const mouseY = ((e.offsetX - haftheight) / haftheight) * angle.x

      dice.style.transform = `rotateX(${-mouseX}deg) rotateY(${mouseY}deg)`
    })
    container.addEventListener("mouseleave", () => {
      dice.style.transition = "transform 1s cubic-bezier(0.5, 0, 0.5, 1)"
      dice.style.transform = ""
    })

    container.addEventListener("click", () => {
      useAll.forEach(({ href }) => {
        href.baseVal = hrefValues[hrefValues.indexOf(href.baseVal) + 1] || hrefValues[0]
      })
    })
  // ]]>
  </script>
</svg>